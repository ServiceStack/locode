import{_ as e,c as t,o,a as s,b as n,d as a}from"./app.3e6fe014.js";var p="/assets/database-first-northwind-default.fcbee9e8.png",c="/assets/img/docs/database-first-northwind-format-1.png",i="/assets/img/docs/database-first-northwind-format-2.png",r="/assets/img/docs/database-first-northwind-format-icon-1.png",l="/assets/img/docs/database-first-northwind-format-icon-2.png",u="/assets/img/docs/database-first-northwind-intl-1.png",d="/assets/img/docs/database-first-northwind-intl-2.png";const V='{"title":"Locode - Database-first","description":"","frontmatter":{"title":"Locode - Database-first"},"headers":[{"level":2,"title":"Northwind example","slug":"northwind-example"},{"level":2,"title":"Create your project","slug":"create-your-project"},{"level":2,"title":"Configuring database connection","slug":"configuring-database-connection"},{"level":3,"title":"Configure.Db.cs","slug":"configure-db-cs"},{"level":3,"title":"Configure.AutoQuery.cs","slug":"configure-autoquery-cs"},{"level":3,"title":"Multiple Schemas","slug":"multiple-schemas"},{"level":3,"title":"Multiple database connections","slug":"multiple-database-connections"},{"level":3,"title":"Multiple Schemas with Named Connections","slug":"multiple-schemas-with-named-connections"},{"level":2,"title":"Customizing Locode App","slug":"customizing-locode-app"},{"level":3,"title":"Adding attributes at runtime","slug":"adding-attributes-at-runtime"},{"level":3,"title":"Format column data and client methods","slug":"format-column-data-and-client-methods"}],"relativePath":"docs/database-first.md"}',k={},h=s('<h1 id="database-first" tabindex="-1">Database-first <a class="header-anchor" href="#database-first" aria-hidden="true">#</a></h1><p>If you have an existing database with data that needs to be managed directly, a Create, Read, Update, Delete (CRUD) application, you can configure your ServiceStack application to use AutoQuery Generated Services. This will use your database schema to generate a working Locode app that can be extended and customized.</p><h2 id="northwind-example" tabindex="-1">Northwind example <a class="header-anchor" href="#northwind-example" aria-hidden="true">#</a></h2><p>We have an example of this in the <a href="https://northwind.locode.dev" target="_blank" rel="noopener noreferrer">Northwind demo</a> which provides a way to manage all the data in the Northwind database with some customizations to improve usability, all with ~120 lines of C#.</p><h2 id="create-your-project" tabindex="-1">Create your project <a class="header-anchor" href="#create-your-project" aria-hidden="true">#</a></h2><a href="https://account.servicestack.net/archive/NetCoreTemplates/web?Name=MyLocodeApp" class="flex text-xl hover:no-underline"><div class="bg-white dark:bg-gray-800 px-4 py-4 mr-4 mb-4 rounded-lg shadow-lg text-center items-center justify-center hover:shadow-2xl dark:border-2 dark:border-pink-600 dark:hover:border-blue-600" style=""><div class="text-center font-extrabold flex items-center justify-center mb-2"><div class="text-4xl text-blue-600 my-3"><svg xmlns="http://www.w3.org/2000/svg" class="w-12 h-12" viewBox="0 0 24 24"><path fill="currentColor" d="M4 10.4V4a1 1 0 0 1 1-1h5V1h4v2h5a1 1 0 0 1 1 1v6.4l1.086.326a1 1 0 0 1 .682 1.2l-1.516 6.068A4.992 4.992 0 0 1 16 16a4.992 4.992 0 0 1-4 2a4.992 4.992 0 0 1-4-2a4.992 4.992 0 0 1-4.252 1.994l-1.516-6.068a1 1 0 0 1 .682-1.2L4 10.4zm2-.6L12 8l2.754.826l1.809.543L18 9.8V5H6v4.8zM4 20a5.978 5.978 0 0 0 4-1.528A5.978 5.978 0 0 0 12 20a5.978 5.978 0 0 0 4-1.528A5.978 5.978 0 0 0 20 20h2v2h-2a7.963 7.963 0 0 1-4-1.07A7.963 7.963 0 0 1 12 22a7.963 7.963 0 0 1-4-1.07A7.963 7.963 0 0 1 4 22H2v-2h2z"></path></svg></div></div><span class="archive-name px-4 pb-2 text-blue-600 dark:text-indigo-400">MyLocodeApp.zip</span><div class="count mt-1 text-gray-400 text-sm"></div></div></a><p>Starting with the basic <code>web</code> template for a ServiceStack application will provide the basic solution structure with a sample Hello World service. This can be done using the <a href="https://servicestack.net" target="_blank" rel="noopener noreferrer">ServiceStack website</a> under <a href="https://servicestack.net/start" target="_blank" rel="noopener noreferrer">Get Started</a>.</p><p>Alternatively, templates can be created using the dotnet CLI tool <code>x</code>. The dotnet <code>x</code> tool can be installed using the following command:</p>',8),g=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"dotnet tool install --global x")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),m=n("p",null,[a("Once installed, a new "),n("code",null,"web"),a(" template can be created using:")],-1),w=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"x new web MyProjectName")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),f=s('<h2 id="configuring-database-connection" tabindex="-1">Configuring database connection <a class="header-anchor" href="#configuring-database-connection" aria-hidden="true">#</a></h2><p>Once you have the new web project open, you will need to configure the following.</p><ul><li>Database type (PostgreSQL, SQL Server, MySQL, or SQLite)</li><li>Database connection string</li><li>AutoQuery Generated Services</li></ul><p>We can use the dotnet <code>x</code> tool to <code>mix</code> in specific database support and AutoQuery quickly using the command run from the project directory.</p>',4),y=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"x mix sqlite autoquery")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),v=s(`<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Replace <code>sqlite</code> with <code>postgres</code>, <code>sqlserver</code>, or <code>mysql</code> or other RDBMS providers</p></div><p>This command will create two files, <code>Configure.Db.cs</code> and <code>Configure.AutoQuery.cs</code> and install required NuGet dependencies into the AppHost (MyLocodeApp in the link above) project.</p><h3 id="configure-db-cs" tabindex="-1">Configure.Db.cs <a class="header-anchor" href="#configure-db-cs" aria-hidden="true">#</a></h3><p>Below we have an example using <code>sqlite</code> of the configuration to add an <code>IDbConnectionFactory</code> dependency into IoC created by this command.</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigureDb</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHostingStartup</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IWebHostBuilder</span> builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> builder
        <span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> services<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrmLiteConnectionFactory</span><span class="token punctuation">(</span>
                context<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;DefaultConnection&quot;</span><span class="token punctuation">)</span>
                <span class="token operator">??</span> <span class="token string">&quot;:memory:&quot;</span><span class="token punctuation">,</span>
                SqliteDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The example above is using an in-<code>:memory:</code> SQLite database, but we want to use a pre-existing database the connection string will need to be updated. To use the Northwind sample database, we can download and copy it into the AppHost project with the <code>Configure.Db.cs</code> file and replace the <code>:memory:</code> connection string with the file name <code>northwind.sqlite</code>. Another easy way to download <code>northwind.sqlite</code> is by using the <code>x</code> tool with the following command run from the AppHost directory.</p>`,6),b=n("div",{class:"sh-copy cp flex cursor-pointer mb-3",onclick:"copy(this)"},[n("div",{class:"flex-grow bg-gray-800"},[n("div",{class:"pl-4 py-1 pb-1.5 align-middle whitespace-pre text-base text-gray-100"},[n("p",null,"x mix northwind.sqlite")])]),n("div",{class:"flex"},[n("div",{class:"bg-green-600 text-white p-1.5 pb-0"},[n("svg",{class:"copied w-6 h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})]),n("svg",{class:"nocopy w-6 h-6",title:"copy",fill:"none",stroke:"white",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},[n("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"1",d:"M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"})])])])],-1),x=s(`<p>Now our application can communicate with the Northwind sample database, we will need to configure AutoQuery to use AutoGen to generate our CRUD services from our database schema.</p><h3 id="configure-autoquery-cs" tabindex="-1">Configure.AutoQuery.cs <a class="header-anchor" href="#configure-autoquery-cs" aria-hidden="true">#</a></h3><p>With the database connection configured, next you will need to configure AutoQuery to scan your database schema and generate the required CRUD services. This feature is known as <code>AutoGen</code> and can be enabled by instantiating the <code>GenerateCrudServices</code> option on the <code>AutoQueryFeature</code> plugin with the <code>AutoRegister</code> flag set to <code>true</code>.</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigureAutoQuery</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHostingStartup</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IWebHostBuilder</span> builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> builder
        <span class="token punctuation">.</span><span class="token function">ConfigureAppHost</span><span class="token punctuation">(</span>appHost <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            appHost<span class="token punctuation">.</span>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AutoQueryFeature</span> <span class="token punctuation">{</span>
                MaxLimit <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>
                
                <span class="token comment">// Add this line, Configures Generated CRUD services with defaults</span>
                GenerateCrudServices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GenerateCrudServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    AutoRegister <span class="token operator">=</span> <span class="token boolean">true</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The <code>AutoQueryFeature</code> plugin will automatically use your registered <code>IDbConnectionFactory</code> to communicate with your database and generate services for the <code>public</code> schema. Running the application after these changes, we will have a <code>Query</code>, <code>Create</code>, <code>Update</code> and <code>Delete</code> services ready to use for each table.</p><p><img src="`+p+`" alt=""></p><h3 id="multiple-schemas" tabindex="-1">Multiple Schemas <a class="header-anchor" href="#multiple-schemas" aria-hidden="true">#</a></h3><p>By default, <code>GenerateCrudServices</code> with <code>AutoRegister</code> will create services for each table in the <code>public</code> schema. If you want to enable services for tables in other schemas, you can use the <code>CreateServices</code> option. For example, if you have a schema by the name of <code>dbo</code> and <code>public</code>, you would use the following options.</p><div class="language-csharp"><pre><code>appHost<span class="token punctuation">.</span>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AutoQueryFeature</span> <span class="token punctuation">{</span>
    MaxLimit <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>
    <span class="token comment">//IncludeTotal = true,</span>
    GenerateCrudServices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GenerateCrudServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Configure which schemas should be used, \`public\` is the default.</span>
        CreateServices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>CreateCrudServices<span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CreateCrudServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CreateCrudServices</span> <span class="token punctuation">{</span> Schema <span class="token operator">=</span> <span class="token string">&quot;dbo&quot;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="multiple-database-connections" tabindex="-1">Multiple database connections <a class="header-anchor" href="#multiple-database-connections" aria-hidden="true">#</a></h3><p>If you are using <a href="https://docs.servicestack.net/autoquery-rdbms#named-connection" target="_blank" rel="noopener noreferrer">Named connections</a> with <a href="https://docs.servicestack.net/ormlite" target="_blank" rel="noopener noreferrer">OrmLite</a>, you can also specify these connections in the <code>CreateServices</code> list. Named connection registration can be done using the <code>IDbConnectionFactory</code> and <code>RegisterConnection</code> method.</p><div class="language-csharp"><pre><code><span class="token comment">// SqlServer with a named &quot;Reporting&quot; PostgreSQL connection as a part of the same \`dbFactory\`</span>
<span class="token class-name"><span class="token keyword">var</span></span> dbFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrmLiteConnectionFactory</span><span class="token punctuation">(</span>connString<span class="token punctuation">,</span> SqlServer2012Dialect<span class="token punctuation">.</span>Provider<span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>dbFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

dbFactory<span class="token punctuation">.</span><span class="token function">RegisterConnection</span><span class="token punctuation">(</span><span class="token string">&quot;Reporting&quot;</span><span class="token punctuation">,</span> pgConnString<span class="token punctuation">,</span> PostgreSqlDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The string name provided to <code>RegisterConnection</code> must match that provided to the <code>NamedConnection</code> property on <code>CreateCrudServices</code>.</p><div class="language-csharp"><pre><code>appHost<span class="token punctuation">.</span>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AutoQueryFeature</span> <span class="token punctuation">{</span>
    MaxLimit <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>
    <span class="token comment">//IncludeTotal = true,</span>
    GenerateCrudServices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GenerateCrudServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Configure multiple databases, \`public\` is the default schema.</span>
        CreateServices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>CreateCrudServices<span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CreateCrudServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CreateCrudServices</span> <span class="token punctuation">{</span> NamedConnection <span class="token operator">=</span> <span class="token string">&quot;Reporting&quot;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="multiple-schemas-with-named-connections" tabindex="-1">Multiple Schemas with Named Connections <a class="header-anchor" href="#multiple-schemas-with-named-connections" aria-hidden="true">#</a></h3><p>These options can be combined so that specific schemas on named connections can also be used.</p><div class="language-csharp"><pre><code>appHost<span class="token punctuation">.</span>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AutoQueryFeature</span> <span class="token punctuation">{</span>
    MaxLimit <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>
    <span class="token comment">//IncludeTotal = true,</span>
    GenerateCrudServices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GenerateCrudServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Configure multiple databases, \`public\` is the default schema.</span>
        CreateServices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>CreateCrudServices<span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CreateCrudServices</span> <span class="token punctuation">{</span> NamedConnection <span class="token operator">=</span> <span class="token string">&quot;Reporting&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CreateCrudServices</span> <span class="token punctuation">{</span> NamedConnection <span class="token operator">=</span> <span class="token string">&quot;Finance&quot;</span><span class="token punctuation">,</span> Schema <span class="token operator">=</span> <span class="token string">&quot;trading&quot;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="customizing-locode-app" tabindex="-1">Customizing Locode App <a class="header-anchor" href="#customizing-locode-app" aria-hidden="true">#</a></h2><p>Locode has a number of attributes that can be used to add additional metadata to your services and data model. This additional metadata in used by the Locode App to enhance the UI and provide additional functionality.</p><h3 id="adding-attributes-at-runtime" tabindex="-1">Adding attributes at runtime <a class="header-anchor" href="#adding-attributes-at-runtime" aria-hidden="true">#</a></h3><p>The use of C# attributes to configure your AutoQuery service metadata works well for declared classes but can also be applied dynamically at startup for generated services. Locode uses a number of attributes on your data model type (related to each table in your database), and API request Data Transfer Object (DTO).</p><p>The <code>ServiceFilter</code> and <code>TypeFilter</code> properties on <code>GenerateCrudServices</code> are <code>Action</code>s you can override run at startup. The <code>ServiceFilter</code> is called with every Service Operation when generating metadata for your services. Here we can add attributes to the generated request DTOs using the <code>AddAttributes</code> or <code>AddAttributeIfNotExists</code> method.</p><h3 id="format-column-data-and-client-methods" tabindex="-1">Format column data and client methods <a class="header-anchor" href="#format-column-data-and-client-methods" aria-hidden="true">#</a></h3><p>To make the Locode app UI easier to use, data can be reformatted on the client for query results. For example, <code>Phone</code> and <code>Fax</code> properties for <code>Customer</code>, <code>Supplier</code>, and <code>Shipper</code> can use the <code>FormatAttribute</code> and the <code>FormatMethods.LinkPhone</code> option to change the UI to present these columns as a <code>tel:</code> HTML link.</p><div class="language-csharp"><pre><code>TypeFilter <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> req<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;Employee&quot;</span> <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">IsCrudCreateOrUpdate</span><span class="token punctuation">(</span><span class="token string">&quot;Employee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span>Name <span class="token keyword">is</span> <span class="token string">&quot;Customer&quot;</span> <span class="token keyword">or</span> <span class="token string">&quot;Supplier&quot;</span> <span class="token keyword">or</span> <span class="token string">&quot;Shipper&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        type<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span><span class="token string">&quot;Phone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddAttribute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">FormatAttribute</span><span class="token punctuation">(</span>FormatMethods<span class="token punctuation">.</span>LinkPhone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        type<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span><span class="token string">&quot;Fax&quot;</span><span class="token punctuation">)</span><span class="token punctuation">?.</span><span class="token function">AddAttribute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">FormatAttribute</span><span class="token punctuation">(</span>FormatMethods<span class="token punctuation">.</span>LinkPhone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,25),_=n("ul",{role:"list",class:"grid grid-cols-1 gap-6 grid-cols-1 sm:grid-cols-2"},[n("li",{class:"col-span-1 flex flex-col text-center items-center bg-white rounded-lg shadow divide-y divide-gray-200"},[n("div",{class:"flex-1 flex flex-col p-4 sm:p-8"},[n("h4",{class:"block text-xl font-medium text-gray-500 pointer-events-none"},"Default"),n("div",{class:"group block rounded-lg focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-offset-gray-100 focus-within:ring-indigo-500 overflow-hidden"},[n("img",{src:c,alt:""})])])]),n("li",{class:"col-span-1 flex flex-col text-center items-center bg-white rounded-lg shadow divide-y divide-gray-200"},[n("div",{class:"flex-1 flex flex-col p-4 sm:p-8"},[n("h4",{class:"block text-xl font-medium text-gray-500 pointer-events-none"},"FormatMethods.LinkPhone"),n("div",{class:"group block rounded-lg focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-offset-gray-100 focus-within:ring-indigo-500 overflow-hidden"},[n("img",{src:i,alt:""})])])])],-1),C=s(`<p>The <code>FormatMethods</code> reference JavaScript methods registered on the client by default.</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FormatMethods</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> Currency <span class="token operator">=</span> <span class="token string">&quot;currency&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> Bytes <span class="token operator">=</span> <span class="token string">&quot;bytes&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> Icon <span class="token operator">=</span> <span class="token string">&quot;icon&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> IconRounded <span class="token operator">=</span> <span class="token string">&quot;iconRounded&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> Attachment <span class="token operator">=</span> <span class="token string">&quot;attachment&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> Link <span class="token operator">=</span> <span class="token string">&quot;link&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> LinkEmail <span class="token operator">=</span> <span class="token string">&quot;linkMailTo&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> LinkPhone <span class="token operator">=</span> <span class="token string">&quot;linkTel&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> Hidden <span class="token operator">=</span> <span class="token string">&quot;hidden&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Another example of <code>FormatMethods</code> used in Northwind is <code>FormatMethods.IconRounded</code> combined with the file upload <code>PhotoPath</code>.</p><div class="language-csharp"><pre><code>TypeFilter <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> req<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;Employee&quot;</span> <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">IsCrudCreateOrUpdate</span><span class="token punctuation">(</span><span class="token string">&quot;Employee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token range operator">..</span><span class="token punctuation">.</span>
        type<span class="token punctuation">.</span><span class="token function">ReorderProperty</span><span class="token punctuation">(</span><span class="token string">&quot;PhotoPath&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">before</span><span class="token punctuation">:</span> <span class="token string">&quot;Title&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">AddAttribute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">FormatAttribute</span><span class="token punctuation">(</span>FormatMethods<span class="token punctuation">.</span>IconRounded<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>ReorderProperty</code> is used to change ordering of the properties which impacts the Locode app default column orderings. Once the <code>FormatAttribute</code> applies the <code>IconRounded</code> we get a preview of our file right in the Locode app.</p>`,5),q=n("ul",{role:"list",class:"grid grid-cols-1 gap-6 grid-cols-1 sm:grid-cols-2"},[n("li",{class:"col-span-1 flex flex-col text-center items-center bg-white rounded-lg shadow divide-y divide-gray-200"},[n("div",{class:"flex-1 flex flex-col p-4 sm:p-8"},[n("h4",{class:"block text-xl font-medium text-gray-500 pointer-events-none"},"Default text"),n("div",{class:"group block rounded-lg focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-offset-gray-100 focus-within:ring-indigo-500 overflow-hidden"},[n("img",{src:r,alt:""})])])]),n("li",{class:"col-span-1 flex flex-col text-center items-center bg-white rounded-lg shadow divide-y divide-gray-200"},[n("div",{class:"flex-1 flex flex-col p-4 sm:p-8"},[n("h4",{class:"block text-xl font-medium text-gray-500 pointer-events-none"},"FormatMethods.IconRounded"),n("div",{class:"group block rounded-lg focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-offset-gray-100 focus-within:ring-indigo-500 overflow-hidden"},[n("img",{src:l,alt:""})])])])],-1),S=s(`<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Images are not original Northwind, paths were migrated to match configured File <code>FilesUploadFeature</code> and the following SQL statement.</p><div class="language-sql"><pre><code><span class="token keyword">update</span> Employee <span class="token keyword">set</span> PhotoPath <span class="token operator">=</span> <span class="token string">&quot;/profiles/employees/&quot;</span> <span class="token operator">||</span> Employee<span class="token punctuation">.</span>Id <span class="token operator">||</span> <span class="token string">&quot;.jpg&quot;</span>
</code></pre></div></div><p>Other client formatting can be found on attributes like <code>IntlNumber</code>,<code>IntlDateTime</code> and <code>IntlRelativeTime</code>. OrderDetail uses <code>IntlNumber</code> with <code>Currency = NumberCurrency.USD</code> for UnitPrice and <code>IntlNumber(NumberStyle.Percent)</code> for Discount.</p><div class="language-csharp"><pre><code>TypeFilter <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> req<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;Employee&quot;</span> <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">IsCrudCreateOrUpdate</span><span class="token punctuation">(</span><span class="token string">&quot;Employee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;OrderDetail&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        type<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span><span class="token string">&quot;UnitPrice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddAttribute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">IntlNumber</span> <span class="token punctuation">{</span> Currency <span class="token operator">=</span> NumberCurrency<span class="token punctuation">.</span>USD <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        type<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span><span class="token string">&quot;Discount&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddAttribute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">IntlNumber</span><span class="token punctuation">(</span>NumberStyle<span class="token punctuation">.</span>Percent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The <code>[Intl*]</code> attributes provide a typed API to utilize JavaScript&#39;s rich <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl" target="_blank" rel="noopener noreferrer">Intl</a> object containing the namespace for the ECMAScript Internationalization API, which provides number formatting, and date &amp; time formatting.</p><p>This can give a much more contextual view of the data in the returning from our services.</p>`,5),A=n("ul",{role:"list",class:"p-0 grid grid-cols-1 gap-6 grid-cols-1 sm:grid-cols-2"},[n("li",{class:"col-span-1 flex flex-col text-center items-center bg-white rounded-lg shadow divide-y divide-gray-200"},[n("div",{class:"flex-1 flex flex-col p-4"},[n("h4",{class:"block text-xl font-medium text-gray-500 pointer-events-none"},"Default"),n("div",{class:"group block rounded-lg focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-offset-gray-100 focus-within:ring-indigo-500 overflow-hidden"},[n("img",{src:u,alt:""})])])]),n("li",{class:"col-span-1 flex flex-col text-center items-center bg-white rounded-lg shadow divide-y divide-gray-200"},[n("div",{class:"flex-1 flex flex-col p-4"},[n("h4",{class:"block text-xl font-medium text-gray-500 pointer-events-none"},"IntlNumber"),n("div",{class:"group block rounded-lg focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-offset-gray-100 focus-within:ring-indigo-500 overflow-hidden"},[n("img",{src:d,alt:""})])])])],-1),T=[h,g,m,w,f,y,v,b,x,_,C,q,S,A];function I(P,F,L,M,D,N){return o(),t("div",null,T)}var j=e(k,[["render",I]]);export{V as __pageData,j as default};
