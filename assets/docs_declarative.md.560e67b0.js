import{_ as t,c as e,o as r,a as o}from"./app.ef23f79a.js";const b='{"title":"Declarative Dev Model using Attributes","description":"","frontmatter":{},"headers":[{"level":3,"title":"Talent Blazor - talent.locode.dev - download.zip","slug":"talent-blazor-talent-locode-dev-download-zip"},{"level":3,"title":"Chinook - chinook.locode.dev - download.zip","slug":"chinook-chinook-locode-dev-download-zip"},{"level":3,"title":"Northwind Auto - northwind.locode.dev - download.zip","slug":"northwind-auto-northwind-locode-dev-download-zip"},{"level":2,"title":"Overview","slug":"overview"},{"level":2,"title":"Data Model Attributes","slug":"data-model-attributes"},{"level":3,"title":"OrmLite Type Attributes","slug":"ormlite-type-attributes"},{"level":3,"title":"OrmLite Property Attributes","slug":"ormlite-property-attributes"},{"level":2,"title":"API Attributes","slug":"api-attributes"},{"level":3,"title":"Custom Serialization","slug":"custom-serialization"},{"level":3,"title":"API Behavior","slug":"api-behavior"},{"level":3,"title":"AutoQuery Attributes","slug":"autoquery-attributes"},{"level":3,"title":"Validation Attributes","slug":"validation-attributes"},{"level":3,"title":"Authentication Restrictions","slug":"authentication-restrictions"},{"level":3,"title":"File Uploads","slug":"file-uploads"},{"level":2,"title":"UI Attributes","slug":"ui-attributes"},{"level":3,"title":"Annotate APIs","slug":"annotate-apis"},{"level":3,"title":"Formatters","slug":"formatters"},{"level":3,"title":"Custom Input Controls","slug":"custom-input-controls"},{"level":3,"title":"Lookup UI References","slug":"lookup-ui-references"}],"relativePath":"docs/declarative.md"}',a={},d=o('<h1 id="declarative-dev-model-using-attributes" tabindex="-1">Declarative Dev Model using Attributes <a class="header-anchor" href="#declarative-dev-model-using-attributes" aria-hidden="true">#</a></h1><p>A significant amount of behavior, functionality and customization of APIs and DTOs can be achieved declaratively through C# Attributes which is used extensively by Locode App Demos to achieve its customized behavior by annotating its C# API Types and Data Models with the extensive functionality available in ServiceStack&#39;s Attributes.</p><p>A great way to get a quick overview of what annotated DTOs looks like in practice is to browse the DTOs of Locode&#39;s Demos where you&#39;ll be able to see &amp; test the cause &amp; effect of different attributes against their Live Demos or by downloading and running a locally modified copy.</p><h3 id="talent-blazor-talent-locode-dev-download-zip" tabindex="-1">Talent Blazor - <a href="https://talent.locode.dev" target="_blank" rel="noopener noreferrer">talent.locode.dev</a> - <a href="https://github.com/NetCoreApps/TalentBlazor/archive/refs/heads/main.zip" target="_blank" rel="noopener noreferrer">download.zip</a> <a class="header-anchor" href="#talent-blazor-talent-locode-dev-download-zip" aria-hidden="true">#</a></h3><ul><li><a href="https://github.com/NetCoreApps/TalentBlazor/blob/main/TalentBlazor.ServiceModel/Talent.cs" target="_blank" rel="noopener noreferrer">Talent.cs</a></li></ul><p>Talent Blazor is a good resource showing how to make use of <a href="https://docs.servicestack.net/autoquery-audit-log" target="_blank" rel="noopener noreferrer">Audit CRUD Events</a> where every change is captured in an Executable Crud Audit Event Log and <a href="https://docs.servicestack.net/autoquery-crud#apply-generic-crud-behaviors" target="_blank" rel="noopener noreferrer">AutoApply Behaviors</a> to change the behavior of Delete APIs to implement &quot;Soft Deletes&quot;.</p><h3 id="chinook-chinook-locode-dev-download-zip" tabindex="-1">Chinook - <a href="https://chinook.locode.dev" target="_blank" rel="noopener noreferrer">chinook.locode.dev</a> - <a href="https://github.com/NetCoreApps/Chinook/archive/refs/heads/main.zip" target="_blank" rel="noopener noreferrer">download.zip</a> <a class="header-anchor" href="#chinook-chinook-locode-dev-download-zip" aria-hidden="true">#</a></h3><ul><li><a href="https://github.com/NetCoreApps/Chinook/blob/main/Chinook.ServiceModel/Types/Models.cs" target="_blank" rel="noopener noreferrer">Types/Models.cs</a></li><li><a href="https://github.com/NetCoreApps/Chinook/blob/main/Chinook.ServiceModel/Media.cs" target="_blank" rel="noopener noreferrer">Media.cs</a></li><li><a href="https://github.com/NetCoreApps/Chinook/blob/main/Chinook.ServiceModel/Store.cs" target="_blank" rel="noopener noreferrer">Store.cs</a></li></ul><p>Chinook is a good simple Code-First example that&#39;s primarily focused on creating a customized UI in Locode.</p><h3 id="northwind-auto-northwind-locode-dev-download-zip" tabindex="-1">Northwind Auto - <a href="https://northwind.locode.dev" target="_blank" rel="noopener noreferrer">northwind.locode.dev</a> - <a href="https://github.com/NetCoreApps/NorthwindAuto/archive/refs/heads/master.zip" target="_blank" rel="noopener noreferrer">download.zip</a> <a class="header-anchor" href="#northwind-auto-northwind-locode-dev-download-zip" aria-hidden="true">#</a></h3><ul><li><a href="https://github.com/NetCoreApps/NorthwindAuto/blob/master/Configure.AppHost.cs" target="_blank" rel="noopener noreferrer">Configure.AppHost.cs</a></li></ul><p>Whilst Northwind is a <a href="/docs/database-first.html">Database-First</a> example, it still has access to the same attributes but are instead <a href="/docs/database-first.html#modifying-dynamic-types-at-runtime">dynamically added at runtime</a>.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-hidden="true">#</a></h2><p>Annotating APIs and Data Models is the primary way of enlisting existing functionality in ServiceStack where most of the functionality can be broadly used grouped into major 3 areas:</p><ul><li><strong>Data Model Attributes</strong> - For utilizing RDBMS features &amp; customizing how Data Models are mapped to RDBMS Tables</li><li><strong>API Attributes</strong> - For customizing the functionality, behavior &amp; accessibility of your APIs</li><li><strong>Metadata &amp; UI Attributes</strong> - For documenting APIs metadata and changing their UI &amp; Appearance in UIs</li></ul><p>Locode Apps, ServiceStack APIs and OrmLite Data Models</p><h2 id="data-model-attributes" tabindex="-1">Data Model Attributes <a class="header-anchor" href="#data-model-attributes" aria-hidden="true">#</a></h2><h3 id="ormlite-type-attributes" tabindex="-1">OrmLite Type Attributes <a class="header-anchor" href="#ormlite-type-attributes" aria-hidden="true">#</a></h3><p>These attributes are used to customize how C# Types configure &amp; map to RDBMS Tables</p><table><thead><tr><th>Attribute</th><th>Description</th></tr></thead><tbody><tr><td><code>[Alias]</code></td><td>Map C# Type Name to an alternative RDBMS Table</td></tr><tr><td><code>[PostCreateTable]</code></td><td>Run Custom SQL immediately after RDBMS table is created</td></tr><tr><td><code>[PostDropTable]</code></td><td>Run Custom SQL immediately after RDBMS table is dropped</td></tr><tr><td><code>[PreCreateTable]</code></td><td>Run Custom SQL immediately before RDBMS table is created</td></tr><tr><td><code>[PostDropTable]</code></td><td>Run Custom SQL immediately before RDBMS table is dropped</td></tr><tr><td><code>[Schema]</code></td><td>Define which RDBMS Schema Data Model belongs to</td></tr><tr><td><code>[UniqueConstraint]</code></td><td>Define a unique multi column RDBMS column constraint</td></tr></tbody></table><h3 id="ormlite-property-attributes" tabindex="-1">OrmLite Property Attributes <a class="header-anchor" href="#ormlite-property-attributes" aria-hidden="true">#</a></h3><p>These attributes are used to customize how C# Properties configure &amp; map to RDBMS Columns</p><table><thead><tr><th>Attribute</th><th>Description</th></tr></thead><tbody><tr><td><code>[Alias]</code></td><td>Map C# Property Name to an alternative RDBMS Column name</td></tr><tr><td><code>[AutoId]</code></td><td>Auto populate Property with a unique RDBMS generated UUID if supported otherwise with a new C# GUID</td></tr><tr><td><code>[AutoIncrement]</code></td><td>Auto populate Primary Key Property with an RDBMS generated Auto Incrementing Integer</td></tr><tr><td><code>[BelongTo]</code></td><td>Populate property from ambiguous column name in the specified joined table type</td></tr><tr><td><code>[CheckConstraint]</code></td><td>Create an Composite RDBMS Index and optional Unique constraint</td></tr><tr><td><code>[Compute]</code></td><td>Define that a Property maps to a computed RDBMS column</td></tr><tr><td><code>[Computed]</code></td><td>Ignore calculated C# Property from being persisted in RDBMS Table</td></tr><tr><td><code>[CustomField]</code></td><td>Create RDBMS using Custom SQL Data Type</td></tr><tr><td><code>[CustomSelect]</code></td><td>Populate property with Custom SELECT expression</td></tr><tr><td><code>[CustomInsert]</code></td><td>Populate INSERT parameter with Custom SQL expression</td></tr><tr><td><code>[CustomUpdate]</code></td><td>Populate UPDATE parameter with Custom SQL expression</td></tr><tr><td><code>[DecimalLength]</code></td><td>Create RDBMS Column with specified decimal scale &amp; precision</td></tr><tr><td><code>[Default]</code></td><td>Create RDBMS Column definition with specified default value</td></tr><tr><td><code>[EnumAsChar]</code></td><td>Save Enum value as single char in RDBMS column</td></tr><tr><td><code>[EnumAsInt]</code></td><td>Save Enum integer value in RDBMS column</td></tr><tr><td><code>[ForeignKey]</code></td><td>Define an RDBMS Foreign Key Relationship</td></tr><tr><td><code>[Ignore]</code></td><td>Ignore property from consideration as an RDBMS column</td></tr><tr><td><code>[IgnoreOnUpdate]</code></td><td>Ignore this property in UPDATE statements</td></tr><tr><td><code>[IgnoreOnInsert]</code></td><td>Ignore this property in INSERT statements</td></tr><tr><td><code>[Index]</code></td><td>Create an RDBMS Column Index</td></tr><tr><td><code>[PrimaryKey]</code></td><td>Treat this property is the Primary Key of the table</td></tr><tr><td><code>[Reference]</code></td><td>Define this property as containing a foreign POCO Complex Type Reference</td></tr><tr><td><code>[ReferenceField]</code></td><td>Populate with a field from a foreign table in AutoQuery and Load* APIs</td></tr><tr><td><code>[References]</code></td><td>Document a reference to an external Type, used to create simple Foreign Key references</td></tr><tr><td><code>[Required]</code></td><td>Create NOT NULL Column Definitions in RDBMS Create Table statements</td></tr><tr><td><code>[ReturnOnInsert]</code></td><td>Indicate property should be included in returning/output clause of SQL INSERT Statements</td></tr><tr><td><code>[RowVersion]</code></td><td>Treat property as an automatically incremented RDBMS Row Version</td></tr><tr><td><code>[StringLength]</code></td><td>Define the RDBMS Column Definition variable character length</td></tr><tr><td><code>[Unique]</code></td><td>Define a unique RDBMS column constraint</td></tr></tbody></table><p>In addition to these generic Data Model attributes that work with any <a href="https://docs.servicestack.net/ormlite/installation" target="_blank" rel="noopener noreferrer">supported RDBMS</a>, there are also <a href="https://docs.servicestack.net/ormlite/postgres-features" target="_blank" rel="noopener noreferrer">PostgreSQL-specific</a> and <a href="https://docs.servicestack.net/ormlite/sql-server-features" target="_blank" rel="noopener noreferrer">SQL Server specific</a> attributes to unlock their RDBMS-specific features.</p><h2 id="api-attributes" tabindex="-1">API Attributes <a class="header-anchor" href="#api-attributes" aria-hidden="true">#</a></h2><h3 id="custom-serialization" tabindex="-1">Custom Serialization <a class="header-anchor" href="#custom-serialization" aria-hidden="true">#</a></h3><table><thead><tr><th>Attribute</th><th>Description</th></tr></thead><tbody><tr><td><code>[DataContract]</code></td><td>Define Type as DTO Type and change serialization to opt-in <code>[DataMember]</code> properties</td></tr><tr><td><code>[DataMember]</code></td><td>Include property in Serialization and optionally change serializable Name and Order</td></tr><tr><td><code>[Flags]</code></td><td>Serialize an Enum&#39;s integer value instead</td></tr><tr><td><code>[IgnoreDataMember]</code></td><td>Ignore property from serialization</td></tr></tbody></table><h3 id="api-behavior" tabindex="-1">API Behavior <a class="header-anchor" href="#api-behavior" aria-hidden="true">#</a></h3><table><thead><tr><th>Attribute</th><th>Description</th></tr></thead><tbody><tr><td><code>[Exclude]</code></td><td>Mark types that are to be excluded from metadata &amp; specified endpoints</td></tr><tr><td><code>[ExcludeMetadata]</code></td><td>Exclude API from all Metadata Services</td></tr><tr><td><code>[Route]</code></td><td>Make this API available on the specified user-defined route</td></tr><tr><td><code>[Restrict]</code></td><td>Make this API available on the specified user-defined route</td></tr></tbody></table><h3 id="autoquery-attributes" tabindex="-1">AutoQuery Attributes <a class="header-anchor" href="#autoquery-attributes" aria-hidden="true">#</a></h3><table><thead><tr><th>Attribute</th><th>Description</th></tr></thead><tbody><tr><td><code>[AutoApply]</code></td><td>Apply built-in composite generic behavior</td></tr><tr><td><code>[AutoPopulate]</code></td><td>Populate data models with generic user &amp; system info</td></tr><tr><td><code>[AutoFilter]</code></td><td>Apply additional pre-configured filters to AutoQuery APIs</td></tr><tr><td><code>[AutoMap]</code></td><td>Map System Input properties to Data Model fields</td></tr><tr><td><code>[AutoDefault]</code></td><td>Specify to fallback default values when not provided</td></tr><tr><td><code>[AutoIgnore]</code></td><td>Ignore mapping Request DTO property to Data Model</td></tr><tr><td><code>[AutoPopulate]</code></td><td>Populate data models with generic user &amp; system info</td></tr><tr><td><code>[AutoUpdate]</code></td><td>Change the update behavior to only update non-default values</td></tr><tr><td><code>[QueryDb]</code></td><td>Change the default querying behaviour of filter properties</td></tr><tr><td><code>[QueryDbField]</code></td><td>Define to use a custom AutoQuery filter</td></tr></tbody></table><h3 id="validation-attributes" tabindex="-1">Validation Attributes <a class="header-anchor" href="#validation-attributes" aria-hidden="true">#</a></h3><h3 id="authentication-restrictions" tabindex="-1">Authentication Restrictions <a class="header-anchor" href="#authentication-restrictions" aria-hidden="true">#</a></h3><p>These <a href="https://docs.servicestack.net/filter-attributes" target="_blank" rel="noopener noreferrer">Request Filter Attributes</a> applied to Service Implementation classes apply to all Service method implementations defined within them.</p><table><thead><tr><th>Attribute</th><th>Description</th></tr></thead><tbody><tr><td><code>[Authenticate]</code></td><td>Protect access to this API to Authenticated Users only</td></tr><tr><td><code>[RequiredClaim]</code></td><td>Protect access to this API to only Authenticated Users with specified Claim</td></tr><tr><td><code>[RequiredPermission]</code></td><td>Protect access to this API to only Authenticated Users assigned with ALL Permissions</td></tr><tr><td><code>[RequiredRole]</code></td><td>Protect access to this API to only Authenticated Users assigned with ALL Roles</td></tr><tr><td><code>[RequiresAnyPermission]</code></td><td>Protect access to this API to Authenticated Users assigned with ANY Permissions</td></tr><tr><td><code>[RequiresAnyRole]</code></td><td>Protect access to this API to Authenticated Users assigned with ANY Roles</td></tr></tbody></table><h3 id="file-uploads" tabindex="-1">File Uploads <a class="header-anchor" href="#file-uploads" aria-hidden="true">#</a></h3><hr><h2 id="ui-attributes" tabindex="-1">UI Attributes <a class="header-anchor" href="#ui-attributes" aria-hidden="true">#</a></h2><h3 id="annotate-apis" tabindex="-1">Annotate APIs <a class="header-anchor" href="#annotate-apis" aria-hidden="true">#</a></h3><table><thead><tr><th>Attribute</th><th>Description</th></tr></thead><tbody><tr><td><code>[Api]</code></td><td>Document a short description for an API Type</td></tr><tr><td><code>[ApiMember]</code></td><td>Document a short description for an API Property</td></tr><tr><td><code>[ApiResponse]</code></td><td>Document potential API Responses this API could return</td></tr><tr><td><code>[ApiAllowableValues]</code></td><td>Document the allowable values for an API Property</td></tr><tr><td><code>[Description]</code></td><td>Annotate any Type, Property or Enum with a textual description</td></tr><tr><td><code>[Id]</code></td><td>Uniquely identify C# Types and properties with a unique integer in gRPC Services</td></tr><tr><td><code>[Meta]</code></td><td>Decorate any type or property with custom metadata</td></tr><tr><td><code>[Meta]</code></td><td>Decorate any type or property with custom metadata</td></tr><tr><td><code>[Range]</code></td><td>Document the allowable min and max range for this property</td></tr><tr><td><code>[Notes]</code></td><td>Document a longer form description about a Type</td></tr></tbody></table><h3 id="formatters" tabindex="-1">Formatters <a class="header-anchor" href="#formatters" aria-hidden="true">#</a></h3><h3 id="custom-input-controls" tabindex="-1">Custom Input Controls <a class="header-anchor" href="#custom-input-controls" aria-hidden="true">#</a></h3><h3 id="lookup-ui-references" tabindex="-1">Lookup UI References <a class="header-anchor" href="#lookup-ui-references" aria-hidden="true">#</a></h3><table><thead><tr><th>Attribute</th><th>Description</th></tr></thead><tbody><tr><td><code>[Input]</code></td><td>Customize the HTML Input control for a Property in Auto Form UIs</td></tr><tr><td><code>[Intl]</code></td><td>Configure result field to use JavaScript&#39;s Intl formatter</td></tr><tr><td><code>[IntlNumber]</code></td><td>Configure result field to use JavaScript&#39;s Intl.NumberFormat formatter</td></tr><tr><td><code>[IntlDateTime]</code></td><td>Configure result field to use JavaScript&#39;s Intl.DateTimeFormat formatter</td></tr><tr><td><code>[IntlRelativeTime]</code></td><td>Configure result field to use JavaScript&#39;s Intl.RelativeTimeFormat formatter</td></tr><tr><td><code>[Field]</code></td><td>Customize a Form Field and HTML Input for a Type&#39;s Property</td></tr><tr><td><code>[Ref]</code></td><td>Define UI References to external Data Models</td></tr></tbody></table>',44),i=[d];function n(s,l,c,u,h,p){return r(),e("div",null,i)}var f=t(a,[["render",n]]);export{b as __pageData,f as default};
