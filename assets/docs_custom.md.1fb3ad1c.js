import{_ as n,c as a,o as s,a as t}from"./app.754c1ea6.js";const h='{"title":"Custom Locode Apps","description":"","frontmatter":{},"headers":[{"level":3,"title":"","slug":""},{"level":2,"title":"API Reference","slug":"api-reference"},{"level":3,"title":"Library Reference","slug":"library-reference"},{"level":3,"title":"UIs","slug":"uis"},{"level":2,"title":"Getting Started","slug":"getting-started"},{"level":3,"title":"TypeScript Definitions only used during development","slug":"typescript-definitions-only-used-during-development"},{"level":3,"title":"Install","slug":"install"},{"level":3,"title":"Update","slug":"update"},{"level":2,"title":"Example Usages","slug":"example-usages"},{"level":3,"title":"Custom Locode Form UIs","slug":"custom-locode-form-uis"},{"level":2,"title":"Custom Locode Home Page","slug":"custom-locode-home-page"}],"relativePath":"docs/custom.md"}',e={},p=t(`<h1 id="custom-locode-apps" tabindex="-1">Custom Locode Apps <a class="header-anchor" href="#custom-locode-apps" aria-hidden="true">#</a></h1><p>When you need to go beyond the declarative and programmatic C#</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3><div class="language-"><pre><code>  /wwwroot/modules/locode
      /custom.js
      /custom.css
      /custom.html
</code></pre></div><h2 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-hidden="true">#</a></h2><p>Type definitions for functionality available in ServiceStack UI&#39;s</p><h3 id="library-reference" tabindex="-1">Library Reference <a class="header-anchor" href="#library-reference" aria-hidden="true">#</a></h3><table><thead><tr><th>Namespace</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://api.locode.dev/modules/shared.html" target="_blank" rel="noopener noreferrer">shared</a></td><td>Type Definitions for all Types and shared functionality used in all UI&#39;s</td></tr><tr><td><a href="https://api.locode.dev/modules/client.html" target="_blank" rel="noopener noreferrer">client</a></td><td>Type Definitions for the <a href="https://github.com/ServiceStack/servicestack-client" target="_blank" rel="noopener noreferrer">@servicestack/client</a> library</td></tr></tbody></table><h3 id="uis" tabindex="-1">UIs <a class="header-anchor" href="#uis" aria-hidden="true">#</a></h3><table><thead><tr><th>UI</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://api.locode.dev/modules/locode.html" target="_blank" rel="noopener noreferrer">locode</a></td><td>Global App and Type instances available in <a href="https://locode.dev" target="_blank" rel="noopener noreferrer">Locode Apps</a></td></tr><tr><td><a href="https://api.locode.dev/modules/explorer.html" target="_blank" rel="noopener noreferrer">explorer</a></td><td>Global App and Type instances available in <a href="https://docs.servicestack.net/api-explorer" target="_blank" rel="noopener noreferrer">API Explorer</a></td></tr><tr><td><a href="https://api.locode.dev/modules/admin.html" target="_blank" rel="noopener noreferrer">admin</a></td><td>Global App and Type instances available in ServiceStack&#39;s <a href="https://docs.servicestack.net/admin-ui" target="_blank" rel="noopener noreferrer">Admin UI</a></td></tr></tbody></table><h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-hidden="true">#</a></h2><p>When customizing any ServiceStack UI App you can enable static typing and intelli-sense by installing this <code>@servicestack/ui</code> package (containing their TypeScript <code>.d.ts</code> definitions) in your host project, then use the standard <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="noopener noreferrer">ES6 import syntax</a> to import any built-in functionality you want to reference.</p><h3 id="typescript-definitions-only-used-during-development" tabindex="-1">TypeScript Definitions only used during development <a class="header-anchor" href="#typescript-definitions-only-used-during-development" aria-hidden="true">#</a></h3><p>Referencing types are only used to enable static analysis benefits during development and have no impact on runtime execution where they&#39;re removed in order for your code to run as-is inside the browser.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>To satisfy the source transforms, each <strong>import</strong> statement should be on a <strong>single line</strong> and should contain <strong>no preceding white space</strong>.</p></div><h3 id="install" tabindex="-1">Install <a class="header-anchor" href="#install" aria-hidden="true">#</a></h3><div class="language-bash"><pre><code>$ <span class="token function">npm</span> <span class="token function">install</span> @servicestack/ui
</code></pre></div><h3 id="update" tabindex="-1">Update <a class="header-anchor" href="#update" aria-hidden="true">#</a></h3><p>Update your local Type definitions to the latest version with:</p><div class="language-bash"><pre><code>$ <span class="token function">npm</span> <span class="token function">install</span> @servicestack/ui@latest
</code></pre></div><h2 id="example-usages" tabindex="-1">Example Usages <a class="header-anchor" href="#example-usages" aria-hidden="true">#</a></h2><p>Examples of customizing local API Explorer and Locode Apps with static analysis &amp; intelli-sense support enabled.</p><h3 id="custom-locode-form-uis" tabindex="-1">Custom Locode Form UIs <a class="header-anchor" href="#custom-locode-form-uis" aria-hidden="true">#</a></h3><p>To override Locode&#39;s built-in Form UI add custom <a href="https://github.com/vuejs/petite-vue" target="_blank" rel="noopener noreferrer">PetiteVue</a> HTML components ti your Host Project <strong>/wwwroot</strong> at <code>/modules/locode/custom.html</code> using the the naming conventions below:</p><table><thead><tr><th>Component Name</th><th>Description</th></tr></thead><tbody><tr><td><code>New{Table}</code></td><td>Custom Create Form UI</td></tr><tr><td><code>Edit{Table}</code></td><td>Custom Update Form UI</td></tr></tbody></table><p>For example, checkout custom components in <a href="https://github.com/NetCoreApps/Chinook/blob/main/Chinook/wwwroot/modules/locode/custom.html" target="_blank" rel="noopener noreferrer">/modules/locode/custom.html</a> used to render Chinook&#39;s <a href="https://chinook.locode.dev/locode/QueryAlbums?new=true" target="_blank" rel="noopener noreferrer">custom Create Album form</a> with static analysis enabled by importing types from <code>@servicestack/ui</code> package using standard, e.g:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> CreateComponentArgs<span class="token punctuation">,</span> EditComponentArgs<span class="token punctuation">,</span> CrudApisState<span class="token punctuation">,</span> map<span class="token punctuation">,</span> inputClass <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@servicestack/ui&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> App<span class="token punctuation">,</span> Forms <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@servicestack/ui/locode&quot;</span>

App<span class="token punctuation">.</span><span class="token function">components</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">/** @param {CreateComponentArgs} args */</span>
    <span class="token function">NewAlbums</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> store<span class="token punctuation">,</span> routes<span class="token punctuation">,</span> settings<span class="token punctuation">,</span> state<span class="token punctuation">,</span> save<span class="token punctuation">,</span> done <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">$template</span><span class="token operator">:</span> <span class="token string">&#39;#new-album-template&#39;</span><span class="token punctuation">,</span>
            store<span class="token punctuation">,</span> routes<span class="token punctuation">,</span> settings<span class="token punctuation">,</span>
            <span class="token comment">/** @type {State} */</span>
            <span class="token keyword">get</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> state <span class="token operator">&amp;&amp;</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">get</span> <span class="token function">apiState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>apiCreate<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">get</span> <span class="token function">model</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>apiState<span class="token punctuation">,</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>model<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token function">inputClass</span><span class="token punctuation">(</span><span class="token parameter">prop<span class="token punctuation">,</span>cls</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">inputClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>apiState<span class="token punctuation">.</span><span class="token function">fieldError</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">,</span>cls<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>

            done<span class="token punctuation">,</span>
            <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>apiState<span class="token punctuation">.</span><span class="token function">apiForm</span><span class="token punctuation">(</span>Forms<span class="token punctuation">.</span><span class="token function">formData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>form<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>apiState<span class="token punctuation">.</span>op<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>api<span class="token punctuation">.</span>succeeded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>new-album-template<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- Component UI... --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="custom-locode-home-page" tabindex="-1">Custom Locode Home Page <a class="header-anchor" href="#custom-locode-home-page" aria-hidden="true">#</a></h2><p>Each built-in ServiceStack UI component can be overridden by creating a local file in your <strong>wwwroot</strong> folder with the same path of the built-in <a href="https://github.com/ServiceStack/ServiceStack/tree/main/ServiceStack/src/ServiceStack/modules" target="_blank" rel="noopener noreferrer">/ServiceStack/modules</a> component you want to replace.</p><p>E.g. Here&#39;s Chinook&#39;s custom home page in <a href="https://github.com/NetCoreApps/Chinook/blob/main/Chinook/wwwroot/modules/locode/components/Welcome.html" target="_blank" rel="noopener noreferrer">/modules/locode/components/Welcome.html</a> that&#39;s used to render <a href="https://chinook.locode.dev/locode" target="_blank" rel="noopener noreferrer">Chinook&#39;s App Home page</a>:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> App<span class="token punctuation">,</span> client <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@servicestack/ui/locode&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> QueryInvoices <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;dtos&quot;</span>

App<span class="token punctuation">.</span><span class="token function">components</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">$template</span><span class="token operator">:</span> <span class="token string">&#39;#welcome-template&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">lastOrders</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                client<span class="token punctuation">.</span><span class="token function">api</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryInvoices</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">orderBy</span><span class="token operator">:</span><span class="token string">&#39;-InvoiceId&#39;</span><span class="token punctuation">,</span> 
                    <span class="token literal-property property">take</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span> 
                    <span class="token literal-property property">fields</span><span class="token operator">:</span><span class="token string">&#39;InvoiceId,CustomerId,InvoiceDate,Total,BillingCountry,BillingCity&#39;</span> 
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">jsconfig</span><span class="token operator">:</span> <span class="token string">&#39;edv&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">api</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>api<span class="token punctuation">.</span>succeeded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span>lastOrders <span class="token operator">=</span> api<span class="token punctuation">.</span>response<span class="token punctuation">.</span>results
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>welcome-template<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pl-4<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">@vue:</span>mounted</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mounted<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-3xl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            Welcome to Chinook Locode
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lastOrders.length<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mt-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-xl mb-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Here are your last {{lastOrders.length}} orders:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>max-w-screen-md<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>PreviewObject({ val:() =&gt; lastOrders })<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Which also makes use of the <a href="https://docs.servicestack.net/typescript-add-servicestack-reference" target="_blank" rel="noopener noreferrer">TypeScript DTOs</a> of its ServiceStack APIs, generated by running:</p><div class="language-bash"><pre><code>$ <span class="token function">npm</span> run dtos
</code></pre></div>`,33),o=[p];function c(l,u,i,r,k,d){return s(),a("div",null,o)}var g=n(e,[["render",c]]);export{h as __pageData,g as default};
